--[Obfuscated by Hercules v1.6 -> https://github.com/zeusssz/hercules-obfuscator | by using the Hercules bot -> https://top.gg/bot/1293608330123804682]

hercules,v1,alpha,__,_ = 'Protected By Hercules V1.6 | VM', function()end, true, 1, 0
-- Generic Helpers
local Env = getfenv and getfenv(0) or _ENV
local FIELDS_PER_FLUSH = 50
local b = string.char
        local function ba(...)
          local d = (...)
          local duh = ""
          for i = 1, #d do
             duh = duh .. b(d[i]/(11/11))
          end
          return duh
        end
local Select = Env[ba({115.0,101.0,108.0,101.0,99.0,116.0,})]
-- Array Helper
local function CreateTbl(_) return {} end;
local Table = Env[ba({116.0,97.0,98.0,108.0,101.0,})]
local String = Env[ba({115.0,116.0,114.0,105.0,110.0,103.0,})]
local Math = Env[ba({109.0,97.0,116.0,104.0,})]
local Unpack = Env[ba({117.0,110.0,112.0,97.0,99.0,107.0,})] or Table[ba({117.0,110.0,112.0,97.0,99.0,107.0,})]
local Floor = Math[ba({102.0,108.0,111.0,111.0,114.0,})]
local Concat = Table[ba({99.0,111.0,110.0,99.0,97.0,116.0,})]
local Byte = String[ba({98.0,121.0,116.0,101.0,})]
local Sub = String[ba({115.0,117.0,98.0,})]
local function Pack(...)
    return {
        n = Select('#', ...), ...
    }
end
local function Move(src, First, Last, Offset, Dst)
    for i = _, Last - First do
        Dst[Offset + i] = src[First + i]
    end
end
-- Mini Bit Library
local function BAnd(a, b)
    local result = _
    local bitval = __
    while a > _ and b > _ do
        if (a % 2 == __) and (b % 2 == __) then
            result = result + bitval
        end
        bitval = bitval * 2
        a = Floor(a / 2)
        b = Floor(b / 2)
    end
    return result
end
local function LShift(x, n)
    return x * 2 ^ n
end
local function RShift(x, n)
    return Floor(x / 2 ^ n)
end
local function BOr(a, b)
    local result = _
    local shift = __
    while a > _ or b > _ do
        local abit = a % 2
        local bbit = b % 2
        if abit == __ or bbit == __ then
            result = result + shift
        end
        a = Floor(a / 2)
        b = Floor(b / 2)
        shift = shift * 2
    end
    return result
end
-- Upvalue Helpers
local function CloseLuaUpvalues(B, N)
    for i, uv in pairs(B) do
        if uv.N >= N then
            uv.m = uv.M[uv.N];
            uv.M = uv;
            uv.N = 'm'
            B[i] = nil;
        end;
    end;
end;
local function SenLuaUpvalue(B, N, X)
    local Prev = B[N]
    if not Prev then
        Prev = { N = N, M = X }
        B[N] = Prev;
    end;
    return Prev;
end;

local Bytecode = {99.0,2.0,0.0,120.0,0.0,0.0,1.0,0.0,0.0,3.0,1.0,2.0,0.0,0.0,0.0,120.0,0.0,0.0,0.0,5.0,1.0,5.0,1.0,8.0,1.0,7.0,1.0,1.0,1.0,13.0,1.0,11.0,1.0,0.0,1.0,16.0,1.0,7.0,1.0,2.0,1.0,13.0,1.0,17.0,1.0,21.0,1.0,20.0,1.0,7.0,1.0,8.0,1.0,11.0,1.0,8.0,1.0,2.0,0.0,28.0,1.0,28.0,1.0,23.0,1.0,4.0,1.0,26.0,1.0,23.0,1.0,22.0,1.0,19.0,1.0,2.0,1.0,10.0,1.0,37.0,1.0,29.0,1.0,29.0,1.0,18.0,1.0,18.0,1.0,40.0,1.0,30.0,1.0,25.0,1.0,26.0,1.0,6.0,1.0,35.0,1.0,18.0,1.0,15.0,1.0,42.0,1.0,39.0,1.0,9.0,1.0,48.0,1.0,31.0,1.0,5.0,1.0,42.0,1.0,55.0,1.0,55.0,1.0,49.0,1.0,27.0,1.0,38.0,1.0,43.0,1.0,40.0,1.0,24.0,1.0,44.0,1.0,17.0,1.0,4.0,1.0,12.0,1.0,60.0,1.0,70.0,1.0,14.0,1.0,70.0,1.0,67.0,1.0,6.0,1.0,62.0,1.0,65.0,1.0,68.0,1.0,58.0,1.0,79.0,1.0,37.0,1.0,34.0,1.0,66.0,1.0,40.0,1.0,76.0,1.0,77.0,1.0,30.0,1.0,79.0,1.0,47.0,1.0,73.0,1.0,2.0,1.0,71.0,1.0,37.0,1.0,3.0,1.0,27.0,1.0,64.0,1.0,65.0,1.0,87.0,1.0,45.0,1.0,24.0,1.0,96.0,1.0,76.0,1.0,83.0,1.0,3.0,1.0,14.0,1.0,68.0,1.0,10.0,1.0,76.0,1.0,67.0,1.0,92.0,1.0,67.0,1.0,106.0,1.0,95.0,1.0,12.0,1.0,89.0,1.0,115.0,1.0,58.0,1.0,50.0,1.0,26.0,1.0,112.0,1.0,53.0,1.0,98.0,1.0,63.0,1.0,105.0,1.0,61.0,1.0,106.0,1.0,106.0,1.0,85.0,1.0,91.0,1.0,74.0,1.0,117.0,1.0,59.0,1.0,88.0,1.0,56.0,1.0,69.0,1.0,92.0,1.0,95.0,1.0,25.0,1.0,101.0,1.0,138.0,1.0,119.0,1.0,92.0,1.0,83.0,1.0,137.0,1.0,25.0,1.0,45.0,1.0,138.0,1.0,114.0,1.0,133.0,1.0,128.0,1.0,44.0,1.0,127.0,1.0,93.0,1.0,130.0,1.0,107.0,1.0,69.0,1.0,99.0,1.0,145.0,1.0,4.0,1.0,159.0,1.0,105.0,1.0,46.0,1.0,143.0,1.0,61.0,1.0,95.0,1.0,28.0,1.0,47.0,1.0,148.0,1.0,103.0,1.0,53.0,1.0,139.0,1.0,99.0,1.0,132.0,1.0,57.0,1.0,33.0,1.0,36.0,1.0,50.0,1.0,104.0,1.0,29.0,1.0,157.0,1.0,110.0,1.0,84.0,1.0,180.0,1.0,14.0,1.0,33.0,1.0,71.0,1.0,170.0,1.0,66.0,1.0,74.0,1.0,44.0,1.0,86.0,1.0,112.0,1.0,59.0,1.0,80.0,1.0,130.0,1.0,114.0,1.0,22.0,1.0,46.0,1.0,102.0,1.0,182.0,1.0,19.0,1.0,166.0,1.0,202.0,1.0,179.0,1.0,127.0,1.0,122.0,1.0,172.0,1.0,193.0,1.0,113.0,1.0,195.0,1.0,177.0,1.0,139.0,1.0,198.0,1.0,85.0,1.0,120.0,1.0,193.0,1.0,191.0,1.0,70.0,1.0,186.0,1.0,198.0,1.0,52.0,1.0,189.0,1.0,192.0,1.0,129.0,1.0,82.0,1.0,202.0,1.0,164.0,1.0,174.0,1.0,134.0,1.0,107.0,1.0,108.0,1.0,45.0,1.0,201.0,1.0,219.0,1.0,102.0,1.0,222.0,1.0,107.0,1.0,206.0,1.0,183.0,1.0,208.0,1.0,152.0,1.0,133.0,1.0,109.0,1.0,24.0,1.0,196.0,1.0,57.0,1.0,198.0,1.0,62.0,1.0,181.0,1.0,193.0,1.0,87.0,1.0,103.0,1.0,157.0,1.0,245.0,1.0,89.0,1.0,59.0,1.0,186.0,1.0,97.0,1.0,175.0,1.0,89.0,1.0,39.0,1.0,246.0,1.0,247.0,1.0,31.0,1.0,199.0,1.0,233.0,1.0,121.0,1.0,235.0,1.0,100.0,1.0,125.0,1.0,56.0,1.0,239.0,1.0,172.0,1.0,252.0,1.0,222.0,1.0,208.0,1.0,43.0,1.0,246.0,1.0,15.0,2.0,68.0,1.0,220.0,1.0,180.0,1.0,244.0,1.0,254.0,1.0,96.0,1.0,5.0,2.0,25.0,2.0,14.0,2.0,216.0,1.0,184.0,1.0,77.0,1.0,162.0,1.0,111.0,1.0,190.0,1.0,31.0,1.0,22.0,2.0,111.0,1.0,253.0,1.0,10.0,1.0,3.0,2.0,4.0,2.0,27.0,2.0,80.0,1.0,162.0,1.0,41.0,2.0,73.0,1.0,30.0,2.0,101.0,1.0,227.0,1.0,218.0,1.0,160.0,1.0,35.0,2.0,194.0,1.0,47.0,1.0,81.0,1.0,140.0,1.0,104.0,1.0,160.0,1.0,45.0,2.0,109.0,1.0,209.0,1.0,203.0,1.0,39.0,2.0,248.0,1.0,17.0,2.0,167.0,1.0,167.0,1.0,51.0,2.0,85.0,1.0,46.0,2.0,253.0,1.0,51.0,2.0,50.0,1.0,54.0,2.0,128.0,1.0,27.0,1.0,65.0,2.0,123.0,1.0,71.0,2.0,171.0,1.0,41.0,1.0,81.0,2.0,72.0,1.0,204.0,1.0,77.0,1.0,190.0,1.0,175.0,1.0,64.0,1.0,87.0,2.0,173.0,1.0,207.0,1.0,75.0,2.0,131.0,1.0,89.0,2.0,9.0,1.0,88.0,2.0,178.0,1.0,56.0,2.0,72.0,2.0,52.0,2.0,21.0,2.0,105.0,2.0,80.0,2.0,154.0,1.0,29.0,2.0,180.0,1.0,4.0,2.0,223.0,1.0,50.0,2.0,79.0,2.0,94.0,1.0,14.0,2.0,55.0,2.0,118.0,2.0,58.0,2.0,94.0,1.0,23.0,2.0,8.0,2.0,231.0,1.0,129.0,1.0,19.0,2.0,213.0,1.0,131.0,1.0,136.0,1.0,174.0,1.0,127.0,2.0,32.0,2.0,125.0,2.0,119.0,2.0,73.0,2.0,101.0,1.0,122.0,2.0,109.0,2.0,63.0,2.0,99.0,1.0,150.0,1.0,67.0,2.0,65.0,2.0,179.0,1.0,238.0,1.0,85.0,2.0,8.0,2.0,82.0,2.0,94.0,2.0,104.0,2.0,20.0,2.0,190.0,1.0,26.0,2.0,210.0,1.0,103.0,2.0,4.0,2.0,243.0,1.0,80.0,1.0,60.0,2.0,199.0,1.0,62.0,2.0,122.0,1.0,104.0,2.0,118.0,2.0,113.0,2.0,52.0,2.0,115.0,2.0,165.0,2.0,118.0,2.0,218.0,1.0,5.0,2.0,178.0,1.0,212.0,1.0,61.0,1.0,75.0,1.0,219.0,1.0,171.0,2.0,129.0,2.0,1.0,2.0,41.0,1.0,248.0,1.0,169.0,2.0,225.0,1.0,135.0,2.0,197.0,1.0,174.0,1.0,104.0,1.0,97.0,1.0,59.0,2.0,184.0,2.0,180.0,2.0,132.0,1.0,87.0,2.0,248.0,1.0,200.0,1.0,182.0,2.0,123.0,1.0,53.0,2.0,167.0,2.0,156.0,1.0,70.0,2.0,84.0,2.0,120.0,2.0,71.0,2.0,37.0,2.0,92.0,2.0,51.0,1.0,43.0,2.0,110.0,2.0,200.0,2.0,155.0,2.0,109.0,1.0,157.0,2.0,216.0,1.0,23.0,2.0,24.0,2.0,185.0,1.0,162.0,2.0,46.0,2.0,35.0,2.0,38.0,2.0,143.0,2.0,31.0,2.0,217.0,2.0,91.0,2.0,104.0,2.0,126.0,2.0,207.0,2.0,48.0,2.0,196.0,1.0,46.0,1.0,144.0,2.0,125.0,2.0,136.0,2.0,227.0,1.0,189.0,1.0,212.0,1.0,63.0,2.0,181.0,2.0,125.0,2.0,227.0,2.0,177.0,2.0,15.0,2.0,179.0,2.0,216.0,2.0,54.0,2.0,71.0,2.0,234.0,2.0,128.0,2.0,191.0,2.0,1.0,2.0,131.0,2.0,185.0,1.0,195.0,2.0,133.0,2.0,217.0,1.0,198.0,2.0,68.0,2.0,135.0,1.0,201.0,2.0,9.0,1.0,147.0,2.0,93.0,2.0,241.0,1.0,43.0,2.0,77.0,2.0,32.0,1.0,167.0,2.0,18.0,2.0,55.0,2.0,243.0,2.0,112.0,2.0,107.0,2.0,159.0,1.0,161.0,2.0,64.0,2.0,3.0,2.0,28.0,2.0,153.0,2.0,223.0,2.0,221.0,2.0,21.0,3.0,183.0,1.0,226.0,2.0,177.0,2.0,6.0,3.0,42.0,2.0,109.0,2.0,175.0,2.0,211.0,2.0,236.0,2.0,128.0,2.0,228.0,2.0,31.0,3.0,62.0,2.0,254.0,2.0,220.0,2.0,66.0,2.0,139.0,2.0,114.0,2.0,185.0,1.0,4.0,3.0,193.0,2.0,91.0,2.0,141.0,1.0,94.0,2.0,151.0,2.0,86.0,1.0,209.0,2.0,217.0,2.0,5.0,3.0,82.0,2.0,78.0,1.0,188.0,2.0,97.0,2.0,86.0,1.0,10.0,3.0,100.0,2.0,244.0,1.0,121.0,2.0,34.0,3.0,127.0,2.0,106.0,2.0,134.0,1.0,243.0,1.0,245.0,2.0,223.0,1.0,33.0,3.0,164.0,2.0,53.0,3.0,24.0,3.0,168.0,2.0,255.0,2.0,183.0,2.0,235.0,2.0,66.0,3.0,239.0,1.0,124.0,2.0,35.0,2.0,64.0,1.0,184.0,2.0,37.0,3.0,3.0,2.0,161.0,2.0,77.0,3.0,184.0,1.0,242.0,2.0,194.0,1.0,226.0,1.0,40.0,2.0,36.0,2.0,53.0,1.0,190.0,2.0,68.0,3.0,151.0,1.0,123.0,2.0,253.0,2.0,11.0,2.0,89.0,3.0,86.0,2.0,137.0,1.0,117.0,2.0,174.0,2.0,150.0,1.0,111.0,1.0,55.0,3.0,73.0,2.0,204.0,2.0,65.0,2.0,253.0,1.0,58.0,2.0,142.0,1.0,2.0,3.0,13.0,3.0,133.0,2.0,213.0,2.0,6.0,2.0,173.0,2.0,185.0,2.0,32.0,2.0,20.0,3.0,126.0,2.0,25.0,3.0,166.0,2.0,117.0,3.0,26.0,2.0,57.0,2.0,14.0,3.0,29.0,3.0,92.0,3.0,66.0,1.0,70.0,3.0,140.0,2.0,125.0,3.0,250.0,2.0,58.0,1.0,86.0,3.0,249.0,1.0,165.0,1.0,132.0,3.0,240.0,2.0,91.0,3.0,230.0,2.0,44.0,2.0,221.0,1.0,103.0,2.0,34.0,2.0,97.0,3.0,159.0,2.0,47.0,2.0,194.0,2.0,102.0,3.0,41.0,3.0,242.0,1.0,105.0,3.0,199.0,2.0,210.0,1.0,93.0,3.0,160.0,1.0,47.0,3.0,148.0,2.0,8.0,3.0,219.0,1.0,10.0,3.0,146.0,1.0,129.0,3.0,202.0,2.0,45.0,2.0,43.0,1.0,149.0,2.0,55.0,3.0,39.0,1.0,114.0,3.0,61.0,3.0,5.0,3.0,152.0,2.0,206.0,2.0,175.0,1.0,126.0,3.0,210.0,2.0,121.0,3.0,229.0,1.0,136.0,3.0,130.0,3.0,106.0,2.0,23.0,3.0,111.0,3.0,113.0,1.0,106.0,3.0,157.0,3.0,41.0,3.0,120.0,2.0,172.0,2.0,186.0,3.0,51.0,1.0,82.0,3.0,163.0,2.0,169.0,2.0,196.0,3.0,178.0,2.0,108.0,2.0,143.0,3.0,103.0,3.0,97.0,2.0,79.0,3.0,243.0,2.0,205.0,3.0,39.0,3.0,156.0,3.0,72.0,2.0,82.0,1.0,142.0,2.0,44.0,3.0,185.0,3.0,207.0,2.0,81.0,2.0,214.0,3.0,48.0,3.0,201.0,3.0,177.0,3.0,99.0,2.0,62.0,3.0,50.0,2.0,118.0,3.0,41.0,3.0,154.0,2.0,218.0,3.0,108.0,2.0,19.0,3.0,148.0,2.0,16.0,3.0,190.0,3.0,12.0,3.0,179.0,3.0,56.0,3.0,181.0,3.0,228.0,2.0,120.0,1.0,134.0,3.0,146.0,1.0,230.0,1.0,99.0,3.0,150.0,2.0,169.0,3.0,209.0,3.0,153.0,3.0,62.0,1.0,88.0,3.0,83.0,3.0,248.0,3.0,36.0,3.0,243.0,3.0,5.0,3.0,165.0,1.0,40.0,3.0,221.0,3.0,168.0,1.0,106.0,3.0,144.0,2.0,17.0,2.0,220.0,3.0,147.0,2.0,72.0,3.0,55.0,3.0,113.0,3.0,167.0,3.0,225.0,3.0,149.0,1.0,227.0,3.0,219.0,2.0,220.0,2.0,207.0,2.0,16.0,3.0,98.0,3.0,116.0,2.0,199.0,3.0,224.0,2.0,183.0,3.0,169.0,3.0,189.0,2.0,222.0,2.0,191.0,3.0,116.0,2.0,206.0,2.0,59.0,2.0,255.0,2.0,27.0,4.0,127.0,3.0,245.0,3.0,29.0,4.0,146.0,1.0,49.0,2.0,163.0,3.0,4.0,4.0,11.0,4.0,244.0,3.0,173.0,3.0,14.0,4.0,72.0,1.0,244.0,3.0,43.0,2.0,132.0,2.0,174.0,3.0,83.0,2.0,231.0,2.0,220.0,3.0,250.0,1.0,224.0,3.0,47.0,4.0,38.0,1.0,227.0,1.0,32.0,1.0,74.0,1.0,239.0,3.0,188.0,1.0,67.0,3.0,250.0,3.0,233.0,3.0,11.0,4.0,220.0,2.0,76.0,3.0,94.0,3.0,68.0,3.0,130.0,3.0,247.0,3.0,133.0,3.0,7.0,2.0,2.0,4.0,213.0,3.0,6.0,3.0,216.0,3.0,128.0,3.0,162.0,3.0,124.0,2.0,241.0,1.0,83.0,3.0,64.0,3.0,121.0,2.0,122.0,3.0,232.0,2.0,250.0,1.0,145.0,3.0,133.0,2.0,168.0,2.0,187.0,1.0,197.0,3.0,209.0,2.0,207.0,3.0,212.0,2.0,203.0,3.0,141.0,3.0,232.0,1.0,179.0,1.0,142.0,2.0,175.0,2.0,202.0,1.0,43.0,3.0,252.0,2.0,81.0,4.0,99.0,3.0,83.0,4.0,150.0,2.0,85.0,4.0,35.0,3.0,157.0,2.0,214.0,1.0,27.0,2.0,218.0,2.0,62.0,4.0,245.0,1.0,29.0,2.0,24.0,4.0,192.0,1.0,25.0,4.0,27.0,3.0,182.0,3.0,119.0,2.0,98.0,4.0,0.0,4.0,141.0,1.0,114.0,4.0,102.0,4.0,170.0,2.0,13.0,2.0,104.0,4.0,174.0,2.0,8.0,4.0,111.0,2.0,117.0,4.0,120.0,3.0,248.0,2.0,113.0,4.0,9.0,2.0,115.0,4.0,125.0,3.0,227.0,2.0,165.0,2.0,216.0,2.0,52.0,3.0,122.0,4.0,56.0,3.0,120.0,1.0,152.0,3.0,7.0,2.0,138.0,2.0,232.0,1.0,116.0,4.0,51.0,2.0,105.0,4.0,136.0,3.0,145.0,2.0,45.0,4.0,19.0,2.0,96.0,2.0,13.0,4.0,38.0,4.0,61.0,4.0,204.0,1.0,64.0,3.0,95.0,3.0,17.0,4.0,28.0,2.0,139.0,3.0,176.0,3.0,153.0,4.0,158.0,2.0,54.0,1.0,22.0,2.0,95.0,4.0,70.0,4.0,68.0,3.0,238.0,3.0,26.0,3.0,168.0,4.0,80.0,3.0,216.0,1.0,127.0,4.0,100.0,3.0,155.0,4.0,182.0,4.0,78.0,4.0,116.0,2.0,137.0,2.0,252.0,3.0,201.0,3.0,247.0,2.0,183.0,4.0,94.0,1.0,185.0,4.0,138.0,2.0,3.0,4.0,20.0,4.0,1.0,3.0,82.0,2.0,7.0,4.0,81.0,4.0,181.0,3.0,93.0,2.0,223.0,3.0,117.0,3.0,180.0,3.0,91.0,2.0,154.0,2.0,188.0,4.0,138.0,4.0,251.0,3.0,122.0,3.0,187.0,3.0,162.0,2.0,34.0,2.0,201.0,3.0,76.0,3.0,149.0,3.0,250.0,2.0,72.0,4.0,18.0,4.0,100.0,2.0,29.0,3.0,30.0,3.0,237.0,1.0,246.0,3.0,235.0,3.0,98.0,3.0,242.0,3.0,159.0,2.0,90.0,2.0,239.0,2.0,194.0,3.0,225.0,4.0,190.0,2.0,210.0,3.0,93.0,3.0,0.0,2.0,112.0,4.0,140.0,3.0,22.0,4.0,183.0,1.0,212.0,3.0,217.0,4.0,218.0,2.0,215.0,3.0,105.0,4.0,191.0,2.0,200.0,2.0,204.0,4.0,9.0,3.0,142.0,3.0,205.0,2.0,49.0,4.0,61.0,3.0,177.0,4.0,167.0,4.0,74.0,2.0,94.0,4.0,21.0,4.0,244.0,4.0,160.0,2.0,181.0,2.0,21.0,3.0,217.0,4.0,176.0,4.0,130.0,3.0,178.0,4.0,124.0,3.0,137.0,4.0,182.0,4.0,241.0,3.0,176.0,3.0,147.0,3.0,158.0,4.0,196.0,2.0,33.0,4.0,238.0,4.0,233.0,4.0,90.0,3.0,141.0,4.0,90.0,4.0,194.0,4.0,19.0,5.0,119.0,1.0,21.0,5.0,109.0,2.0,118.0,4.0,210.0,3.0,24.0,5.0,237.0,2.0,80.0,4.0,201.0,4.0,191.0,1.0,248.0,4.0,140.0,3.0,236.0,1.0,214.0,4.0,3.0,3.0,253.0,4.0,249.0,2.0,167.0,1.0,166.0,3.0,164.0,4.0,192.0,1.0,14.0,5.0,4.0,5.0,111.0,2.0,139.0,4.0,7.0,5.0,233.0,4.0,123.0,3.0,25.0,4.0,41.0,5.0,181.0,4.0,147.0,1.0,246.0,2.0,15.0,5.0,148.0,4.0,144.0,3.0,30.0,5.0,226.0,4.0,243.0,3.0,231.0,2.0,114.0,4.0,29.0,5.0,62.0,3.0,31.0,5.0,254.0,3.0,244.0,2.0,198.0,4.0,213.0,3.0,218.0,4.0,86.0,2.0,201.0,4.0,84.0,3.0,69.0,2.0,47.0,5.0,170.0,4.0,49.0,5.0,0.0,5.0,208.0,4.0,52.0,3.0,53.0,5.0,160.0,4.0,26.0,4.0,195.0,2.0,163.0,3.0,160.0,4.0,227.0,3.0,176.0,2.0,226.0,3.0,163.0,3.0,49.0,4.0,50.0,3.0,149.0,4.0,59.0,3.0,94.0,4.0,165.0,4.0,117.0,3.0,124.0,4.0,55.0,5.0,66.0,3.0,57.0,5.0,215.0,2.0,173.0,4.0,252.0,1.0,12.0,5.0,102.0,1.0,91.0,5.0,64.0,5.0,36.0,4.0,103.0,3.0,120.0,4.0,158.0,2.0,0.0,4.0,232.0,2.0,68.0,4.0,60.0,4.0,79.0,3.0,237.0,4.0,244.0,2.0,245.0,3.0,109.0,3.0,236.0,4.0,121.0,5.0,242.0,3.0,123.0,5.0,221.0,4.0,47.0,2.0,195.0,4.0,84.0,1.0,191.0,4.0,155.0,3.0,247.0,4.0,45.0,2.0,249.0,4.0,44.0,5.0,251.0,4.0,161.0,3.0,20.0,2.0,171.0,3.0,86.0,5.0,54.0,1.0,163.0,4.0,105.0,5.0,97.0,4.0,118.0,5.0,102.0,2.0,212.0,4.0,230.0,3.0,83.0,5.0,130.0,2.0,216.0,4.0,11.0,5.0,62.0,5.0,119.0,5.0,136.0,5.0,16.0,5.0,181.0,4.0,18.0,5.0,69.0,5.0,33.0,5.0,124.0,5.0,193.0,4.0,74.0,5.0,189.0,4.0,78.0,2.0,21.0,5.0,186.0,4.0,123.0,4.0,62.0,4.0,42.0,2.0,238.0,4.0,70.0,5.0,63.0,1.0,165.0,5.0,49.0,5.0,70.0,4.0,139.0,5.0,173.0,2.0,246.0,4.0,162.0,5.0,158.0,1.0,43.0,5.0,193.0,3.0,101.0,4.0,201.0,2.0,102.0,5.0,171.0,1.0,50.0,5.0,153.0,5.0,135.0,3.0,155.0,5.0,9.0,4.0,224.0,1.0,195.0,3.0,8.0,3.0,194.0,4.0,73.0,4.0,115.0,3.0,9.0,4.0,176.0,2.0,16.0,4.0,228.0,3.0,62.0,3.0,179.0,4.0,150.0,5.0,152.0,4.0,113.0,5.0,85.0,2.0,143.0,2.0,3.0,5.0,111.0,3.0,156.0,1.0,193.0,3.0,163.0,2.0,53.0,2.0,97.0,3.0,70.0,5.0,45.0,5.0,200.0,3.0,235.0,3.0,75.0,5.0,128.0,5.0,101.0,3.0,130.0,5.0,178.0,5.0,192.0,5.0,181.0,5.0,230.0,2.0,228.0,5.0,233.0,5.0,162.0,5.0,144.0,5.0,193.0,5.0,114.0,4.0,195.0,5.0,73.0,4.0,206.0,4.0,104.0,5.0,183.0,4.0,173.0,3.0,201.0,5.0,108.0,5.0,206.0,5.0,184.0,3.0,159.0,5.0,133.0,1.0,148.0,3.0,141.0,4.0,174.0,4.0,241.0,1.0,220.0,4.0,65.0,5.0,31.0,4.0,225.0,2.0,21.0,4.0,231.0,5.0,227.0,4.0,244.0,3.0,174.0,2.0,73.0,3.0,232.0,5.0,232.0,4.0,122.0,2.0,234.0,5.0,65.0,3.0,190.0,4.0,127.0,5.0,239.0,4.0,78.0,2.0,18.0,6.0,139.0,2.0,61.0,5.0,242.0,5.0,155.0,5.0,231.0,1.0,245.0,5.0,181.0,3.0,5.0,5.0,202.0,5.0,152.0,5.0,249.0,5.0,81.0,2.0,40.0,4.0,250.0,2.0,224.0,4.0,16.0,6.0,111.0,4.0,45.0,5.0,243.0,1.0,237.0,4.0,16.0,5.0,32.0,6.0,204.0,2.0,6.0,2.0,220.0,5.0,251.0,5.0,102.0,5.0,33.0,4.0,253.0,5.0,35.0,4.0,164.0,5.0,6.0,6.0,78.0,2.0,37.0,6.0,110.0,3.0,179.0,5.0,250.0,5.0,94.0,5.0,61.0,4.0,2.0,5.0,73.0,4.0,179.0,4.0,59.0,6.0,202.0,3.0,55.0,4.0,124.0,1.0,207.0,5.0,2.0,5.0,44.0,5.0,95.0,5.0,234.0,3.0,206.0,2.0,58.0,3.0,34.0,6.0,241.0,3.0,175.0,5.0,38.0,4.0,252.0,5.0,213.0,5.0,213.0,4.0,171.0,4.0,119.0,1.0,217.0,5.0,46.0,6.0,255.0,2.0,5.0,6.0,31.0,2.0,166.0,5.0,183.0,3.0,55.0,5.0,169.0,5.0,188.0,5.0,72.0,5.0,125.0,5.0,138.0,5.0,76.0,5.0,217.0,2.0,39.0,5.0,19.0,6.0,5.0,5.0,133.0,3.0,135.0,5.0,15.0,5.0,44.0,2.0,204.0,3.0,37.0,5.0,192.0,2.0,221.0,3.0,25.0,2.0,199.0,4.0,42.0,5.0,5.0,4.0,28.0,6.0,147.0,5.0,20.0,4.0,149.0,5.0,3.0,6.0,108.0,6.0,247.0,3.0,79.0,6.0,163.0,1.0,210.0,4.0,54.0,5.0,206.0,5.0,84.0,6.0,8.0,5.0,108.0,1.0,66.0,4.0,88.0,6.0,229.0,3.0,49.0,6.0,126.0,6.0,220.0,4.0,28.0,3.0,109.0,5.0,10.0,6.0,182.0,5.0,22.0,5.0,89.0,3.0,59.0,2.0,203.0,3.0,232.0,5.0,42.0,2.0,177.0,5.0,103.0,6.0,139.0,6.0,231.0,5.0,22.0,6.0,166.0,1.0,24.0,4.0,246.0,2.0,185.0,5.0,242.0,2.0,130.0,6.0,189.0,5.0,114.0,5.0,143.0,5.0,192.0,5.0,117.0,6.0,86.0,4.0,148.0,5.0,120.0,6.0,34.0,2.0,60.0,4.0,51.0,6.0,116.0,1.0,11.0,3.0,136.0,6.0,212.0,5.0,214.0,2.0,41.0,6.0,85.0,6.0,36.0,6.0,66.0,4.0,206.0,4.0,219.0,5.0,117.0,5.0,172.0,6.0,180.0,4.0,126.0,3.0,225.0,5.0,127.0,5.0,11.0,6.0,56.0,2.0,171.0,5.0,230.0,5.0,133.0,3.0,58.0,5.0,146.0,5.0,131.0,5.0,224.0,5.0,166.0,1.0,237.0,5.0,38.0,5.0,193.0,6.0,40.0,5.0,104.0,6.0,162.0,6.0,136.0,6.0,29.0,6.0,204.0,4.0,59.0,6.0,121.0,6.0,248.0,5.0,124.0,6.0,194.0,4.0,255.0,5.0,82.0,6.0,242.0,3.0,158.0,5.0,42.0,6.0,113.0,1.0,161.0,5.0,160.0,6.0,183.0,3.0,90.0,6.0,221.0,5.0,66.0,5.0,120.0,5.0,221.0,4.0,45.0,4.0,96.0,6.0,56.0,1.0,196.0,2.0,44.0,6.0,249.0,2.0,99.0,4.0,192.0,4.0,230.0,5.0,145.0,6.0,152.0,6.0,67.0,2.0,184.0,5.0,1.0,6.0,249.0,3.0,153.0,3.0,159.0,6.0,61.0,5.0,191.0,5.0,116.0,6.0,203.0,6.0,118.0,6.0,82.0,4.0,65.0,6.0,109.0,5.0,87.0,5.0,208.0,6.0,170.0,6.0,32.0,1.0,49.0,4.0,50.0,4.0,247.0,3.0,77.0,6.0,96.0,5.0,185.0,2.0,208.0,2.0,237.0,3.0,203.0,5.0,83.0,6.0,214.0,6.0,176.0,6.0,131.0,6.0,10.0,5.0,218.0,6.0,169.0,2.0,220.0,6.0,201.0,5.0,223.0,4.0,60.0,6.0,95.0,6.0,186.0,2.0,97.0,6.0,172.0,5.0,189.0,2.0,21.0,6.0,26.0,5.0,148.0,6.0,93.0,6.0,247.0,2.0,105.0,6.0,246.0,1.0,187.0,2.0,36.0,2.0,212.0,2.0,85.0,3.0,130.0,6.0,106.0,4.0,200.0,6.0,249.0,6.0,0.0,3.0,79.0,4.0,199.0,6.0,110.0,5.0,54.0,3.0,196.0,5.0,179.0,6.0,78.0,6.0,208.0,5.0,124.0,1.0,211.0,6.0,6.0,7.0,213.0,6.0,175.0,6.0,34.0,7.0,217.0,6.0,242.0,6.0,13.0,7.0,135.0,6.0,202.0,4.0,164.0,5.0,138.0,6.0,68.0,5.0,226.0,5.0,170.0,5.0,20.0,7.0,18.0,4.0,168.0,1.0,25.0,5.0,238.0,5.0,25.0,7.0,23.0,5.0,145.0,1.0,197.0,6.0,192.0,2.0,126.0,5.0,107.0,6.0,238.0,6.0,36.0,3.0,158.0,6.0,141.0,5.0,190.0,5.0,182.0,1.0,244.0,6.0,57.0,7.0,46.0,5.0,20.0,2.0,202.0,5.0,48.0,5.0,38.0,1.0,45.0,7.0,168.0,3.0,99.0,5.0,222.0,4.0,149.0,5.0,43.0,4.0,149.0,1.0,202.0,2.0,20.0,5.0,147.0,4.0,15.0,4.0,33.0,2.0,196.0,6.0,32.0,7.0,150.0,3.0,218.0,3.0,111.0,5.0,173.0,2.0,75.0,7.0,221.0,2.0,218.0,5.0,13.0,5.0,117.0,6.0,82.0,7.0,44.0,4.0,137.0,4.0,54.0,7.0,174.0,5.0,164.0,3.0,211.0,3.0,63.0,7.0,60.0,6.0,116.0,7.0,40.0,6.0,198.0,3.0,206.0,3.0,132.0,5.0,20.0,5.0,21.0,6.0,0.0,4.0,183.0,5.0,9.0,2.0,114.0,6.0,153.0,1.0,250.0,4.0,18.0,6.0,179.0,4.0,42.0,7.0,246.0,5.0,142.0,3.0,208.0,6.0,46.0,7.0,90.0,7.0,214.0,5.0,27.0,3.0,174.0,6.0,102.0,2.0,96.0,3.0,105.0,7.0,53.0,7.0,179.0,6.0,109.0,7.0,245.0,6.0,111.0,7.0,183.0,6.0,14.0,6.0,140.0,6.0,17.0,6.0,13.0,6.0,91.0,4.0,100.0,6.0,121.0,7.0,43.0,6.0,24.0,6.0,153.0,7.0,28.0,7.0,122.0,3.0,40.0,7.0,25.0,6.0,201.0,6.0,81.0,7.0,159.0,5.0,204.0,6.0,84.0,7.0,166.0,6.0,114.0,7.0,177.0,6.0,51.0,6.0,139.0,7.0,211.0,5.0,38.0,6.0,119.0,7.0,128.0,5.0,104.0,7.0,130.0,2.0,229.0,6.0,107.0,7.0,37.0,7.0,54.0,6.0,14.0,7.0,182.0,6.0,169.0,6.0,142.0,7.0,176.0,3.0,213.0,5.0,55.0,6.0,91.0,6.0,192.0,3.0,40.0,4.0,85.0,7.0,179.0,7.0,54.0,1.0,11.0,2.0,114.0,3.0,46.0,7.0,196.0,5.0,71.0,4.0,92.0,7.0,34.0,4.0,122.0,6.0,151.0,5.0,96.0,7.0,139.0,4.0,61.0,4.0,145.0,5.0,168.0,6.0,80.0,6.0,231.0,1.0,212.0,2.0,163.0,6.0,250.0,5.0,171.0,5.0,49.0,7.0,70.0,7.0,186.0,6.0,227.0,5.0,59.0,5.0,187.0,4.0,122.0,1.0,66.0,7.0,105.0,7.0,57.0,3.0,132.0,2.0,194.0,3.0,218.0,4.0,71.0,7.0,0.0,6.0,27.0,5.0,91.0,6.0,185.0,5.0,234.0,4.0,76.0,7.0,153.0,3.0,94.0,6.0,227.0,6.0,131.0,3.0,137.0,5.0,57.0,3.0,22.0,3.0,11.0,6.0,215.0,1.0,189.0,6.0,60.0,3.0,249.0,1.0,85.0,3.0,99.0,4.0,84.0,2.0,232.0,6.0,149.0,4.0,148.0,2.0,252.0,7.0,127.0,7.0,175.0,4.0,184.0,5.0,254.0,2.0,145.0,6.0,9.0,7.0,49.0,5.0,156.0,7.0,59.0,7.0,6.0,8.0,152.0,3.0,3.0,8.0,224.0,7.0,138.0,3.0,191.0,7.0,226.0,5.0,240.0,7.0,239.0,5.0,194.0,6.0,219.0,2.0,94.0,5.0,69.0,5.0,127.0,7.0,47.0,3.0,236.0,7.0,205.0,5.0,25.0,5.0,19.0,8.0,183.0,7.0,167.0,5.0,136.0,4.0,218.0,7.0,23.0,7.0,25.0,8.0,106.0,7.0,138.0,3.0,113.0,3.0,234.0,6.0,253.0,7.0,238.0,2.0,28.0,5.0,157.0,3.0,8.0,3.0,40.0,8.0,25.0,8.0,35.0,7.0,0.0,8.0,172.0,4.0,33.0,7.0,130.0,6.0,100.0,4.0,20.0,7.0,203.0,5.0,55.0,4.0,98.0,4.0,4.0,4.0,108.0,2.0,142.0,6.0,131.0,3.0,23.0,6.0,33.0,7.0,99.0,4.0,238.0,7.0,230.0,7.0,193.0,4.0,181.0,1.0,107.0,2.0,144.0,6.0,185.0,4.0,112.0,6.0,221.0,5.0,131.0,6.0,44.0,4.0,209.0,3.0,17.0,3.0,23.0,6.0,154.0,6.0,206.0,4.0,58.0,3.0,192.0,3.0,80.0,8.0,82.0,7.0,222.0,5.0,240.0,7.0,175.0,4.0,102.0,7.0,62.0,8.0,51.0,7.0,71.0,8.0,60.0,8.0,104.0,3.0,128.0,1.0,73.0,2.0,79.0,8.0,20.0,8.0,86.0,6.0,233.0,1.0,47.0,4.0,132.0,7.0,32.0,3.0,94.0,8.0,196.0,4.0,132.0,2.0,161.0,6.0,125.0,6.0,70.0,3.0,194.0,6.0,4.0,3.0,87.0,8.0,248.0,7.0,213.0,4.0,204.0,3.0,164.0,6.0,82.0,3.0,89.0,4.0,237.0,7.0,14.0,3.0,121.0,4.0,52.0,3.0,149.0,3.0,178.0,2.0,186.0,1.0,26.0,7.0,37.0,2.0,2.0,8.0,152.0,4.0,144.0,2.0,130.0,4.0,154.0,3.0,132.0,4.0,13.0,2.0,205.0,1.0,205.0,6.0,51.0,4.0,237.0,7.0,1.0,7.0,175.0,7.0,170.0,6.0,99.0,5.0,219.0,3.0,33.0,8.0,150.0,3.0,32.0,7.0,41.0,6.0,3.0,7.0,216.0,6.0,153.0,4.0,9.0,8.0,21.0,3.0,6.0,7.0,182.0,3.0,120.0,8.0,61.0,2.0,0.0,2.0,243.0,2.0,2.0,2.0,56.0,2.0,128.0,3.0,150.0,5.0,233.0,4.0,219.0,7.0,58.0,3.0,224.0,6.0,251.0,7.0,226.0,6.0,229.0,5.0,103.0,5.0,165.0,8.0,27.0,7.0,19.0,7.0,43.0,8.0,67.0,8.0,233.0,1.0,7.0,8.0,152.0,6.0,4.0,8.0,141.0,4.0,130.0,8.0,118.0,8.0,38.0,7.0,157.0,4.0,158.0,4.0,108.0,3.0,247.0,5.0,49.0,7.0,250.0,7.0,136.0,4.0,45.0,7.0,140.0,8.0,119.0,4.0,157.0,8.0,143.0,8.0,31.0,7.0,6.0,5.0,22.0,3.0,177.0,8.0,15.0,8.0,159.0,8.0,80.0,5.0,162.0,1.0,227.0,2.0,154.0,8.0,128.0,4.0,156.0,4.0,193.0,8.0,57.0,4.0,111.0,2.0,170.0,8.0,9.0,7.0,163.0,8.0,95.0,3.0,210.0,8.0,247.0,7.0,249.0,7.0,164.0,8.0,186.0,5.0,220.0,3.0,29.0,7.0,239.0,2.0,168.0,6.0,137.0,7.0,172.0,3.0,157.0,1.0,172.0,1.0,173.0,3.0,208.0,5.0,105.0,2.0,114.0,3.0,250.0,6.0,109.0,7.0,39.0,4.0,92.0,5.0,26.0,2.0,36.0,5.0,227.0,8.0,195.0,7.0,33.0,2.0,154.0,4.0,151.0,8.0,106.0,8.0,159.0,3.0,235.0,1.0,32.0,3.0,185.0,8.0,137.0,7.0,187.0,8.0,118.0,4.0,115.0,4.0,190.0,8.0,89.0,7.0,124.0,8.0,15.0,3.0,205.0,7.0,237.0,7.0,113.0,3.0,53.0,6.0,133.0,8.0,98.0,7.0,133.0,4.0,179.0,2.0,204.0,2.0,142.0,7.0,81.0,6.0,197.0,8.0,47.0,8.0,252.0,3.0,225.0,8.0,240.0,1.0,153.0,8.0,145.0,4.0,146.0,4.0,155.0,8.0,62.0,8.0,254.0,6.0,254.0,2.0,152.0,3.0,86.0,8.0,148.0,6.0,182.0,2.0,21.0,9.0,186.0,6.0,247.0,7.0,235.0,7.0,229.0,4.0,75.0,6.0,255.0,5.0,122.0,5.0,23.0,9.0,153.0,4.0,180.0,8.0,1.0,6.0,168.0,7.0,205.0,8.0,170.0,7.0,119.0,6.0,59.0,6.0,195.0,8.0,205.0,2.0,67.0,6.0,32.0,4.0,209.0,6.0,141.0,8.0,193.0,8.0,7.0,9.0,144.0,8.0,169.0,4.0,43.0,5.0,11.0,9.0,235.0,4.0,13.0,9.0,159.0,8.0,15.0,9.0,192.0,8.0,93.0,4.0,205.0,8.0,112.0,7.0,39.0,2.0,158.0,7.0,226.0,7.0,164.0,7.0,133.0,7.0,89.0,6.0,64.0,9.0,93.0,2.0,155.0,7.0,216.0,8.0,200.0,1.0,140.0,6.0,250.0,3.0,165.0,7.0,240.0,8.0,252.0,1.0,141.0,2.0,183.0,8.0,32.0,3.0,159.0,4.0,247.0,8.0,8.0,9.0,241.0,8.0,33.0,6.0,2.0,7.0,109.0,6.0,227.0,8.0,201.0,7.0,6.0,9.0,111.0,8.0,112.0,8.0,180.0,7.0,10.0,9.0,137.0,2.0,123.0,7.0,117.0,8.0,202.0,8.0,47.0,6.0,136.0,2.0,59.0,9.0,94.0,3.0,3.0,7.0,206.0,6.0,200.0,8.0,194.0,6.0,99.0,9.0,199.0,7.0,101.0,9.0,253.0,8.0,60.0,9.0,104.0,9.0,53.0,4.0,186.0,8.0,84.0,9.0,78.0,9.0,61.0,6.0,200.0,7.0,3.0,9.0,57.0,4.0,175.0,7.0,234.0,7.0,136.0,8.0,37.0,2.0,233.0,8.0,54.0,4.0,184.0,4.0,120.0,9.0,208.0,2.0,212.0,7.0,87.0,8.0,240.0,1.0,201.0,8.0,216.0,7.0,18.0,2.0,204.0,8.0,59.0,5.0,121.0,8.0,195.0,7.0,124.0,8.0,112.0,3.0,116.0,9.0,39.0,4.0,58.0,9.0,108.0,6.0,18.0,9.0,104.0,4.0,15.0,3.0,160.0,2.0,224.0,1.0,195.0,2.0,227.0,6.0,200.0,1.0,70.0,9.0,49.0,1.0,156.0,9.0,242.0,8.0,155.0,1.0,83.0,7.0,10.0,8.0,86.0,2.0,86.0,3.0,181.0,2.0,35.0,9.0,166.0,7.0,181.0,8.0,242.0,1.0,82.0,5.0,39.0,9.0,45.0,3.0,228.0,7.0,202.0,8.0,242.0,7.0,196.0,7.0,234.0,5.0,123.0,7.0,39.0,6.0,97.0,6.0,101.0,5.0,144.0,1.0,70.0,2.0,123.0,8.0,100.0,5.0,140.0,1.0,94.0,7.0,13.0,9.0,206.0,3.0,139.0,2.0,169.0,1.0,63.0,4.0,142.0,4.0,218.0,6.0,144.0,9.0,230.0,8.0,152.0,2.0,103.0,9.0,140.0,9.0,54.0,2.0,53.0,4.0,168.0,5.0,126.0,9.0,175.0,8.0,180.0,9.0,31.0,2.0,43.0,6.0,211.0,5.0,41.0,4.0,96.0,2.0,153.0,9.0,99.0,8.0,71.0,5.0,40.0,2.0,157.0,9.0,212.0,1.0,181.0,9.0,79.0,8.0,214.0,1.0,159.0,9.0,170.0,7.0,156.0,1.0,166.0,9.0,192.0,7.0,168.0,9.0,39.0,7.0,25.0,7.0,75.0,4.0,117.0,8.0,173.0,5.0,126.0,9.0,204.0,8.0,72.0,8.0,97.0,7.0,57.0,6.0,235.0,8.0,108.0,6.0,201.0,9.0,92.0,9.0,32.0,5.0,13.0,4.0,205.0,9.0,140.0,9.0,201.0,7.0,254.0,7.0,160.0,6.0,215.0,7.0,211.0,9.0,37.0,8.0,96.0,8.0,77.0,9.0,133.0,6.0,98.0,1.0,169.0,9.0,72.0,8.0,228.0,1.0,251.0,2.0,41.0,9.0,245.0,7.0,100.0,7.0,216.0,9.0,101.0,4.0,97.0,8.0,152.0,9.0,164.0,9.0,173.0,6.0,53.0,2.0,116.0,5.0,1.0,4.0,149.0,7.0,141.0,5.0,52.0,6.0,124.0,4.0,100.0,7.0,209.0,5.0,253.0,6.0,99.0,9.0,222.0,8.0,181.0,9.0,165.0,1.0,22.0,10.0,253.0,2.0,90.0,2.0,169.0,1.0,255.0,1.0,216.0,9.0,173.0,1.0,19.0,10.0,218.0,2.0,176.0,4.0,40.0,7.0,149.0,5.0,10.0,2.0,198.0,2.0,202.0,8.0,112.0,7.0,36.0,2.0,135.0,3.0,225.0,8.0,137.0,5.0,54.0,4.0,13.0,5.0,161.0,2.0,17.0,10.0,50.0,9.0,19.0,10.0,33.0,10.0,24.0,9.0,174.0,7.0,249.0,1.0,121.0,8.0,173.0,5.0,87.0,8.0,44.0,10.0,31.0,10.0,7.0,3.0,121.0,8.0,13.0,3.0,174.0,3.0,197.0,3.0,82.0,4.0,116.0,6.0,15.0,10.0,52.0,5.0,118.0,3.0,4.0,6.0,254.0,3.0,222.0,5.0,11.0,10.0,56.0,10.0,188.0,6.0,153.0,6.0,156.0,3.0,5.0,4.0,136.0,9.0,238.0,3.0,11.0,3.0,31.0,3.0,20.0,10.0,250.0,1.0,35.0,3.0,85.0,8.0,63.0,5.0,57.0,2.0,219.0,8.0,41.0,4.0,67.0,10.0,77.0,10.0,11.0,2.0,217.0,3.0,84.0,1.0,149.0,1.0,40.0,10.0,253.0,6.0,108.0,5.0,69.0,10.0,184.0,8.0,98.0,1.0,163.0,1.0,107.0,9.0,140.0,1.0,138.0,6.0,78.0,10.0,74.0,5.0,174.0,7.0,203.0,9.0,129.0,8.0,11.0,10.0,49.0,3.0,53.0,10.0,142.0,7.0,41.0,10.0,175.0,8.0,101.0,10.0,58.0,4.0,114.0,10.0,138.0,1.0,105.0,10.0,153.0,8.0,253.0,5.0,187.0,5.0,135.0,1.0,74.0,8.0,96.0,10.0,48.0,4.0,10.0,10.0,102.0,3.0,42.0,10.0,112.0,10.0,88.0,10.0,112.0,8.0,12.0,6.0,200.0,5.0,16.0,10.0,72.0,10.0,152.0,9.0,26.0,8.0,192.0,3.0,162.0,9.0,118.0,10.0,150.0,3.0,104.0,10.0,98.0,10.0,122.0,10.0,223.0,9.0,95.0,10.0,230.0,9.0,45.0,9.0,93.0,10.0,36.0,6.0,66.0,10.0,115.0,10.0,151.0,9.0,46.0,2.0,124.0,10.0,64.0,10.0,159.0,3.0,91.0,10.0,52.0,5.0,226.0,2.0,112.0,7.0,12.0,4.0,198.0,2.0,86.0,10.0,163.0,10.0,126.0,10.0,100.0,4.0,89.0,10.0,37.0,10.0,48.0,6.0,229.0,7.0,108.0,4.0,103.0,10.0,200.0,8.0,200.0,5.0,108.0,9.0,149.0,10.0,68.0,5.0,132.0,10.0,56.0,10.0,170.0,10.0,18.0,10.0,134.0,10.0,108.0,1.0,67.0,10.0,63.0,5.0,182.0,10.0,55.0,10.0,205.0,2.0,84.0,10.0,108.0,4.0,90.0,10.0,188.0,10.0,81.0,10.0,54.0,10.0,33.0,4.0,192.0,10.0,199.0,8.0,36.0,6.0,160.0,10.0,197.0,10.0,155.0,10.0,78.0,8.0,197.0,5.0,103.0,5.0,28.0,10.0,157.0,9.0,148.0,1.0,32.0,10.0,7.0,10.0,125.0,10.0,236.0,9.0,42.0,9.0,171.0,6.0,171.0,10.0,73.0,9.0,101.0,4.0,92.0,9.0,79.0,10.0,42.0,9.0,87.0,7.0,94.0,10.0,228.0,1.0,210.0,10.0,128.0,10.0,30.0,10.0,154.0,1.0,214.0,1.0,74.0,6.0,217.0,1.0,145.0,7.0,214.0,10.0,189.0,10.0,180.0,10.0,215.0,10.0,94.0,2.0,80.0,10.0,136.0,10.0,195.0,10.0,41.0,10.0,90.0,1.0,214.0,9.0,166.0,10.0,147.0,1.0,112.0,10.0,24.0,10.0,104.0,8.0,82.0,6.0,147.0,1.0,249.0,10.0,250.0,5.0,251.0,10.0,173.0,10.0,92.0,8.0,90.0,10.0,131.0,5.0,20.0,10.0,142.0,10.0,190.0,10.0,232.0,4.0,5.0,11.0,95.0,10.0,223.0,10.0,17.0,10.0,164.0,10.0,137.0,1.0,220.0,10.0,42.0,10.0,183.0,10.0,0.0,9.0,39.0,10.0,187.0,10.0,172.0,10.0,225.0,10.0,209.0,10.0,189.0,6.0,109.0,3.0,228.0,9.0,226.0,10.0,216.0,9.0,255.0,8.0,162.0,9.0,24.0,10.0,243.0,6.0,208.0,7.0,123.0,4.0,26.0,11.0,76.0,4.0,255.0,10.0,50.0,10.0,14.0,11.0,86.0,10.0,136.0,9.0,251.0,3.0,75.0,10.0,173.0,10.0,24.0,9.0,43.0,10.0,19.0,11.0,58.0,10.0,42.0,11.0,241.0,10.0,243.0,10.0,105.0,3.0,68.0,10.0,153.0,8.0,95.0,10.0,253.0,10.0,153.0,10.0,212.0,10.0,116.0,10.0,38.0,11.0,24.0,11.0,53.0,11.0,162.0,9.0,12.0,11.0,0.0,9.0,46.0,11.0,102.0,10.0,243.0,10.0,198.0,10.0,24.0,11.0,60.0,3.0,227.0,10.0,87.0,1.0,67.0,11.0,224.0,8.0,92.0,10.0,72.0,5.0,131.0,10.0,9.0,11.0,11.0,11.0,238.0,3.0,75.0,11.0,174.0,9.0,137.0,10.0,161.0,10.0,205.0,10.0,73.0,9.0,107.0,3.0,64.0,11.0,182.0,10.0,106.0,10.0,52.0,6.0,179.0,10.0,156.0,2.0,64.0,11.0,131.0,3.0,79.0,11.0,207.0,7.0,169.0,7.0,238.0,8.0,60.0,11.0,90.0,5.0,62.0,11.0,80.0,11.0,52.0,10.0,216.0,10.0,27.0,4.0,57.0,10.0,230.0,10.0,28.0,5.0,80.0,5.0,43.0,11.0,245.0,8.0,222.0,10.0,73.0,10.0,41.0,11.0,240.0,10.0,202.0,10.0,176.0,10.0,142.0,3.0,225.0,10.0,196.0,10.0,13.0,5.0,249.0,9.0,104.0,11.0,17.0,11.0,181.0,10.0,78.0,11.0,111.0,10.0,111.0,10.0,28.0,3.0,47.0,10.0,74.0,8.0,192.0,9.0,41.0,4.0,119.0,10.0,163.0,1.0,156.0,10.0,70.0,11.0,29.0,10.0,251.0,1.0,133.0,10.0,242.0,1.0,108.0,11.0,21.0,8.0,3.0,11.0,144.0,11.0,122.0,11.0,14.0,11.0,144.0,6.0,168.0,10.0,238.0,10.0,11.0,8.0,31.0,3.0,39.0,11.0,92.0,2.0,34.0,11.0,242.0,7.0,101.0,10.0,251.0,7.0,229.0,10.0,30.0,11.0,80.0,7.0,127.0,10.0,251.0,1.0,227.0,8.0,192.0,7.0,232.0,10.0,58.0,4.0,39.0,8.0,223.0,3.0,174.0,3.0,232.0,10.0,203.0,1.0,90.0,5.0,200.0,10.0,199.0,8.0,165.0,10.0,218.0,10.0,66.0,11.0,178.0,11.0,43.0,10.0,63.0,11.0,167.0,10.0,224.0,4.0,94.0,10.0,65.0,10.0,51.0,11.0,16.0,10.0,168.0,10.0,116.0,5.0,106.0,11.0,55.0,11.0,209.0,8.0,224.0,8.0,143.0,11.0,54.0,3.0,77.0,4.0,35.0,5.0,94.0,11.0,179.0,10.0,151.0,9.0,201.0,11.0,185.0,11.0,241.0,10.0,174.0,11.0,219.0,5.0,31.0,8.0,43.0,9.0,163.0,11.0,79.0,11.0,15.0,11.0,150.0,11.0,125.0,9.0,88.0,11.0,163.0,10.0,106.0,11.0,48.0,10.0,253.0,10.0,212.0,10.0,169.0,11.0,184.0,4.0,171.0,11.0,222.0,11.0,170.0,11.0,224.0,11.0,122.0,10.0,239.0,10.0,49.0,3.0,175.0,8.0,220.0,10.0,236.0,9.0,26.0,10.0,127.0,10.0,150.0,9.0,36.0,10.0,213.0,10.0,116.0,8.0,204.0,10.0,97.0,10.0,55.0,8.0,0.0,11.0,230.0,11.0,38.0,10.0,117.0,10.0,239.0,10.0,151.0,5.0,120.0,11.0,33.0,10.0,81.0,9.0,124.0,1.0,179.0,11.0,209.0,11.0,52.0,11.0,180.0,6.0,129.0,8.0,11.0,8.0,137.0,11.0,37.0,11.0,76.0,11.0,183.0,11.0,68.0,11.0,178.0,10.0,206.0,11.0,81.0,9.0,189.0,9.0,223.0,10.0,169.0,10.0,115.0,11.0,12.0,11.0,193.0,10.0,31.0,4.0,84.0,11.0,57.0,9.0,14.0,9.0,247.0,11.0,173.0,11.0,48.0,6.0,60.0,8.0,154.0,10.0,20.0,12.0,20.0,11.0,80.0,10.0,1.0,12.0,24.0,12.0,219.0,10.0,129.0,4.0,9.0,10.0,100.0,5.0,188.0,10.0,49.0,7.0,248.0,11.0,230.0,11.0,226.0,11.0,212.0,6.0,6.0,12.0,19.0,12.0,63.0,5.0,242.0,11.0,187.0,11.0,33.0,12.0,18.0,12.0,97.0,10.0,100.0,11.0,45.0,10.0,231.0,10.0,117.0,10.0,87.0,10.0,132.0,11.0,13.0,11.0,76.0,11.0,243.0,11.0,55.0,10.0,189.0,11.0,149.0,11.0,37.0,12.0,145.0,1.0,219.0,4.0,48.0,8.0,193.0,11.0,19.0,10.0,60.0,10.0,98.0,10.0,4.0,11.0,92.0,10.0,129.0,2.0,85.0,8.0,67.0,12.0,118.0,11.0,244.0,9.0,199.0,1.0,60.0,10.0,200.0,10.0,51.0,10.0,250.0,11.0,48.0,10.0,184.0,10.0,65.0,11.0,224.0,10.0,11.0,10.0,88.0,4.0,247.0,10.0,68.0,5.0,243.0,7.0,127.0,11.0,82.0,10.0,214.0,2.0,176.0,11.0,45.0,11.0,112.0,10.0,184.0,10.0,39.0,10.0,88.0,10.0,74.0,12.0,115.0,10.0,43.0,11.0,242.0,11.0,242.0,10.0,75.0,10.0,121.0,11.0,190.0,11.0,36.0,12.0,147.0,6.0,236.0,10.0,92.0,11.0,2.0,11.0,49.0,11.0,120.0,10.0,68.0,12.0,96.0,8.0,228.0,10.0,103.0,2.0,135.0,11.0,216.0,10.0,30.0,5.0,52.0,10.0,161.0,11.0,233.0,10.0,236.0,4.0,156.0,11.0,231.0,10.0,3.0,4.0,43.0,11.0,44.0,11.0,222.0,8.0,65.0,11.0,230.0,9.0,124.0,11.0,109.0,4.0,16.0,12.0,116.0,11.0,134.0,12.0,81.0,12.0,131.0,11.0,64.0,7.0,103.0,12.0,114.0,12.0,92.0,12.0,97.0,11.0,91.0,12.0,88.0,11.0,88.0,12.0,81.0,10.0,47.0,12.0,177.0,10.0,48.0,11.0,158.0,4.0,45.0,3.0,69.0,12.0,103.0,8.0,227.0,6.0,117.0,1.0,245.0,10.0,115.0,5.0,12.0,2.0,79.0,3.0,196.0,1.0,124.0,5.0,105.0,2.0,234.0,1.0,145.0,5.0,187.0,2.0,49.0,12.0,109.0,4.0,104.0,3.0,12.0,2.0,126.0,9.0,155.0,12.0,220.0,8.0,160.0,4.0,169.0,12.0,80.0,7.0,110.0,4.0,77.0,2.0,166.0,4.0,104.0,10.0,229.0,4.0,113.0,6.0,176.0,1.0,165.0,12.0,16.0,2.0,244.0,5.0,102.0,6.0,199.0,7.0,147.0,12.0,203.0,1.0,187.0,11.0,0.0,11.0,87.0,11.0,215.0,10.0,183.0,10.0,9.0,12.0,16.0,11.0,231.0,11.0,113.0,11.0,52.0,11.0,187.0,11.0,87.0,3.0,134.0,4.0,215.0,3.0,44.0,11.0,7.0,4.0,195.0,11.0,129.0,4.0,74.0,11.0,158.0,3.0,233.0,10.0,188.0,1.0,178.0,12.0,76.0,2.0,162.0,12.0,174.0,12.0,177.0,1.0,221.0,1.0,207.0,12.0,31.0,11.0,209.0,12.0,209.0,12.0,211.0,12.0,101.0,2.0,28.0,2.0,179.0,12.0,42.0,5.0,60.0,12.0,171.0,12.0,60.0,2.0,25.0,2.0,205.0,12.0,100.0,10.0,131.0,10.0,212.0,11.0,162.0,10.0,252.0,5.0,70.0,8.0,154.0,11.0,63.0,4.0,228.0,12.0,205.0,12.0,34.0,10.0,245.0,8.0,228.0,4.0,195.0,11.0,255.0,4.0,172.0,3.0,254.0,5.0,243.0,3.0,255.0,11.0,44.0,9.0,50.0,12.0,245.0,7.0,146.0,9.0,60.0,9.0,153.0,1.0,235.0,5.0,155.0,2.0,165.0,8.0,70.0,5.0,5.0,10.0,214.0,12.0,224.0,9.0,105.0,4.0,62.0,2.0,241.0,6.0,158.0,12.0,82.0,5.0,245.0,10.0,219.0,3.0,125.0,12.0,161.0,6.0,243.0,8.0,108.0,11.0,223.0,7.0,229.0,5.0,181.0,12.0,216.0,12.0,213.0,9.0,154.0,12.0,185.0,12.0,207.0,11.0,251.0,11.0,81.0,12.0,87.0,12.0,85.0,12.0,197.0,12.0,190.0,11.0,181.0,10.0,130.0,11.0,15.0,11.0,94.0,7.0,185.0,3.0,50.0,4.0,108.0,9.0,34.0,13.0,146.0,10.0,180.0,6.0,8.0,12.0,102.0,11.0,32.0,13.0,32.0,13.0,168.0,12.0,169.0,10.0,73.0,10.0,80.0,11.0,21.0,8.0,46.0,10.0,44.0,13.0,85.0,12.0,46.0,13.0,30.0,13.0,243.0,11.0,134.0,5.0,125.0,9.0,237.0,10.0,23.0,12.0,49.0,10.0,235.0,11.0,153.0,10.0,110.0,12.0,135.0,12.0,12.0,12.0,196.0,12.0,133.0,12.0,131.0,12.0,147.0,10.0,91.0,11.0,101.0,12.0,63.0,13.0,18.0,11.0,194.0,12.0,225.0,8.0,164.0,10.0,137.0,12.0,89.0,12.0,44.0,12.0,97.0,12.0,28.0,12.0,107.0,11.0,206.0,7.0,71.0,13.0,188.0,12.0,73.0,12.0,217.0,10.0,46.0,11.0,32.0,6.0,27.0,13.0,132.0,10.0,41.0,11.0,133.0,11.0,96.0,12.0,150.0,10.0,227.0,11.0,79.0,10.0,108.0,10.0,6.0,11.0,87.0,13.0,250.0,11.0,100.0,13.0,78.0,11.0,142.0,10.0,196.0,12.0,146.0,10.0,160.0,10.0,97.0,4.0,82.0,10.0,38.0,12.0,26.0,12.0,50.0,11.0,86.0,6.0,5.0,12.0,180.0,11.0,103.0,13.0,118.0,8.0,93.0,12.0,115.0,11.0,79.0,12.0,29.0,13.0,109.0,13.0,115.0,13.0,85.0,11.0,209.0,11.0,34.0,13.0,58.0,13.0,216.0,7.0,238.0,10.0,180.0,10.0,90.0,11.0,3.0,11.0,27.0,12.0,80.0,12.0,189.0,9.0,150.0,10.0,29.0,9.0,16.0,1.0,}
-- Byte decompression
local basedictdecompress = {}
for i = 0, 255 do
    local ic, iic = b(i), b(i, 0)
    basedictdecompress[iic] = ic
end
local function dictAddB(str, dict, a, b)
    if a >= 256 then
        a, b = 0, b + 1
        if b >= 256 then
            dict = {}
            b = 1
        end
    end
    dict[string.char(a, b)] = str
    a = a + 1
    return dict, a, b
end
Bytecode = ba(Bytecode)
local control = Sub(Bytecode, 1, 1)
Bytecode = Sub(Bytecode, 2)
local len = #Bytecode
local dict = {}
local a, b = 0, 1
local result = {}
local n = 1
local last = Sub(Bytecode, 1, 2)
result[n] = basedictdecompress[last] or dict[last]
n = n + 1
for i = 3, len, 2 do
    local code = Sub(Bytecode, i, i + 1)
    local lastStr = basedictdecompress[last] or dict[last]
    local toAdd = basedictdecompress[code] or dict[code]
    if toAdd then
        result[n] = toAdd
        n = n + 1
        dict, a, b = dictAddB(lastStr .. Sub(toAdd, 1, 1), dict, a, b)
    else
        local tmp = lastStr .. Sub(lastStr, 1, 1)
        result[n] = tmp
        n = n + 1
        dict, a, b = dictAddB(tmp, dict, a, b)
    end
    last = code
end
Bytecode = Concat(result)
-- Byte Decoder
local charset = ba({2.0,0.0,})
local base, decoded = #charset, {}
local decode_lookup = {}
    for i = 1, base do decode_lookup[charset:sub(i, i)] = i - 1 end
    for encoded_char in Bytecode:gmatch("[^x]+") do
        local n = 0
        for i = 1, #encoded_char do n = n * base + decode_lookup[encoded_char:sub(i, i)] end
        decoded[#decoded+1] = string.char(n)
    end
    Bytecode = Concat(decoded)
    local Pos = __
    local function gBits8()
        local Val = Byte(Bytecode, Pos, Pos)
        Pos = Pos + __
        return Val;
    end;
    local function gBits16()
        local Val1, Val2 = Byte(Bytecode, Pos, Pos + 2)
        Pos = Pos + 2;
        return (Val2 * 256) + Val1;
    end;
    local function gBits32()
        local Val1, Val2, Val3, Val4 = Byte(Bytecode, Pos, Pos + 3)
        Pos = Pos + 4;
        return (Val4 * 16777216) + (Val3 * 65536) + (Val2 * 256) + Val1;
    end;
    function gChunk()
        local Chunk = {
            n = gBits8(),
            c = gBits8(),
            d = gBits8(),
            x = {},
            D = {},
            V = {}
        }
        for i = __, gBits32() do
            local Data = gBits32()
            local Sco = gBits8()
            local Type = gBits8()
            local Inst = {
                m = Data,
                S = Sco,
                A = gBits16()
            }
            local Mode = {
                b = gBits8(),
                c = gBits8()
            }
            if (Type == __) then
                Inst.B = gBits16()
                Inst.C = gBits16()
                Inst.s = Mode.b == __ and Inst.B > 0xFF
                Inst.a = Mode.c == __ and Inst.C > 0xFF
            elseif (Type == 2) then
                Inst.F = gBits32()
                Inst.g = Mode.b == __
            elseif (Type == 3) then
                Inst.f = gBits32() - 131071
            end;
            Chunk.x[i] = Inst;
        end;
        for i = __, gBits32() do
            local Type = gBits8()
            if (Type == __) then
                Chunk.D[i - __] = (gBits8() ~= _)
            elseif (Type == 3) then
                Chunk.D[i - __] =     (function()
        local Left = gBits32()
        local Right = gBits32()
        local IsNormal = __
        local Mantissa = BOr(LShift(BAnd(Right, 0xFFFFF), 32), Left);
        local Exponent  = BAnd(RShift(Right, 20), 0x7FF)
        local Sign = (-__) ^ RShift(Right, 31)
        if Exponent == _ then
            if Mantissa == _ then
                return Sign * _
            else
                Exponent = __
                IsNormal = _
            end;
        elseif Exponent == 2047 then
            if Mantissa == _ then
                return Sign * (__ / _)
            else
                return Sign * (_ / _)
            end;
        end;
        return math.ldexp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)))
    end)()
            elseif (Type == 4) then
                Chunk.D[i - __] =     (function()
		local Str;
			local baik = gBits32();
			if (baik == _) then return; end;
			Str	= Sub(Bytecode, Pos, Pos + baik - __);
			Pos = Pos + baik
		return Str;
	end)()
            end
        end;
        for i = __, gBits32() do
            Chunk.V[i - __] = gChunk()
        end
        -- post process optimization
        for _, v in ipairs(Chunk.x) do
            if v.g then
                v.D = Chunk.D[v.F]
            else
                if v.s then
                    v.A = Chunk.D[v.B - 256]
                end;
                if v.a then
                    v.C = Chunk.D[v.C - 256]
                end;
            end;
        end
        return Chunk
    end;

function WrapState(V, Upval)
    return (function(...)
        local Passed = Pack(...)
        local X = CreateTbl(V.d)
        local v = { b = _, B = {} }
        Move(Passed, __, V.c, _, X)
        if (V.c < Passed.n) then
            local Start = V.c + __
            local b = Passed.n - V.c;
            v.b = b;
            Move(Passed, Start, Start + b - __, __, v.B)
        end;
        local State = {
            v = v,
            X = X,
            x = V.x,
            Z = V.V,
            z = __
        }
        return (function(State,n)
    local x = State.x;
    local V = State.Z;
    local v = State.v;
    local Top = -__;
    local SenB = {}
    local X = State.X;
    local z = State.z;
    while alpha do
        local Inst = x[z]
        local S = Inst.S;
        z = z + __;

if (S == 1) then

			X[Inst.A] = Inst.D;
		
elseif (S == 2) then

			X[Inst.A] = Inst.B ~= 0;
			if Inst.C ~= 0 then z = z + 1 end;
		
elseif (S == 4) then

			local Uv = n[Inst.B];
			X[Inst.A] = Uv.M[Uv.N];
		
elseif (S == 5) then

			X[Inst.A] = Env[Inst.D];
		
elseif (S == 6) then

			local N = Inst.a and Inst.C or X[Inst.C];
			X[Inst.A] = X[Inst.B][N];
		
elseif (S == 0) then

			X[Inst.A] = X[Inst.B];
		
elseif (S == 21) then

			local B, C = Inst.B, Inst.C;
			local Success, Str = pcall(table.concat, X, "", B, C);
			if not Success then
				Str = X[B] or "";
				for i = B + 1, C do
					Str = Str .. (X[i] or X[i - 1]);
				end
			end;
			X[Inst.A] = Str;
		
elseif (S == 30) then

			local A, B = Inst.A, Inst.B;
			local b = (B == 0) and (Top - A + 1) or (B - 1);
			CloseLuaUpvalues(SenB, 0);
			return Unpack(X, A, A + b - 1);
		
elseif (S == 33) then

			local A = Inst.A;
			local Base = A + 3;
			local Vals = {X[A](X[A + 1], X[A + 2])};
			Move(Vals, 1, Inst.C, Base, X);
			if X[Base] ~= nil then
				X[A + 2] = X[Base];
				z = z + x[z].f;
			end;
			z = z + 1;
		
elseif (S == 34) then

			local A, C = Inst.A, Inst.C;
			local b = Inst.B;
			local Tab = X[A];
			if b == 0 then b = Top - A end;
			if C == 0 then
				C = x[z].m;
				z = z + 1;
			end;
			local Offset = (C - 1) * FIELDS_PER_FLUSH;
			Move(X, A + 1, A + b, Offset + 1, Tab);
		
elseif (S == 35) then

CloseLuaUpvalues(SenB, Inst.A)
elseif (S == 36) then

			local Sub = V[Inst.F];
			local Nups = Sub.n;
			local UvB;
			if Nups ~= 0 then
				UvB = CreateTbl(Nups - 1);
				for i = 1, Nups do
					local Pseudo = x[z + i - 1];
					if (Pseudo.S == 0) then
						UvB[i - 1] = SenLuaUpvalue(SenB, Pseudo.B, X);
					elseif (Pseudo.S == 4) then
						UvB[i - 1] = n[Pseudo.B];
					end;
				end;
				z = z + Nups;
			end;
			X[Inst.A] = WrapState(Sub, Env, UvB);
		
elseif (S == 22) then

			z = z + Inst.f;
		
elseif (S == 23) then

			local Lhs = Inst.s and Inst.A or X[Inst.B];
			local Rhs = Inst.a and Inst.C or X[Inst.C];
			if (Lhs == Rhs) == (Inst.A ~= 0) then z = z + x[z].f end;
			z = z + 1;
		
elseif (S == 9) then

			local N = Inst.s and Inst.A or X[Inst.B];
			local m = Inst.a and Inst.C or X[Inst.C];
			X[Inst.A][N] = m;
		
elseif (S == 10) then

			X[Inst.A] = {};
		
elseif (S == 11) then

			local A, B = Inst.A, Inst.B;
			local N = Inst.a and Inst.C or X[Inst.C];
			X[A + 1] = X[B];
			X[A] = X[B][N];
		
elseif (S == 13) then

			local Lhs = Inst.s and Inst.A or X[Inst.B];
			local Rhs = Inst.a and Inst.C or X[Inst.C];
			X[Inst.A] = Lhs - Rhs;
		
elseif (S == 28) then

			local A, B, C = Inst.A, Inst.B, Inst.C;
			local Params = (B == 0) and (Top - A) or (B - 1);
			local RetB = Pack(X[A](Unpack(X, A + 1, A + Params)));
			local RetNum = RetB.n;
			if C == 0 then
				Top = A + RetNum - 1;
			else
				RetNum = C - 1;
			end;
			Move(RetB, 1, RetNum, A, X);
		
elseif (S == 14) then

			local Lhs = Inst.s and Inst.A or X[Inst.B];
			local Rhs = Inst.a and Inst.C or X[Inst.C];
			X[Inst.A] = Lhs * Rhs;
		
elseif (S == 26) then

			if (not X[Inst.A]) ~= (Inst.C ~= 0) then z = z + x[z].f end;
			z = z + 1;
		
end
        State.z = z;
     end
     end)(State,Upval)
    end)(V,Upval)
end;

WrapState(gChunk())
